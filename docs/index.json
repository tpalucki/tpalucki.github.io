[{"content":"I haven\u0026rsquo;t had any experience in building a blog yet but as an engineer I had some vision and principles I wanted to follow. Some of them are:\n Simplicity and minimalism Readability Ease of configuration Themes available - because I want to deliver fast to stay in the fun zone Possibility to extend later (comments etc)  The easiest way would be to setup blog on a Wordpress powered hosting but it doesn\u0026rsquo;t sound like fun to me üòÅ I\u0026rsquo;ve done some research and found out that static site generator would be the perfect solution here. Light, simple configuration, fast delivery and huge field for modifications - sounds perfect to me!\nA moment of googling and I found several of-the-shelve solutions, where Jekyll and Hugo seemed to be the most popular. Finally I have picked Hugo due to simple configuration, nice docs and support - and here it is!\nI also needed a theme so I went through https://themes.gohugo.io/ and picked PaperMod. PaperMOd is clean, readable, responsive and minimalistic with dark mode - pretty all I wanted for the beginning. I think I will fork it later and extend it somehow - I have already done some customizations due to problems with newer Hugo version I use.\nGoogle Analytics update I thought it would be nice to have traffic analysis for my page to see what is going on. To achieve that I registered and generated proper tags through Google Analytics service.\nThere is also a very nice guide on how to add Google Analytics to your Hugo based page.\n","permalink":"https://tpalucki.github.io/posts/how-this-blog-is-built/","summary":"I haven\u0026rsquo;t had any experience in building a blog yet but as an engineer I had some vision and principles I wanted to follow. Some of them are:\n Simplicity and minimalism Readability Ease of configuration Themes available - because I want to deliver fast to stay in the fun zone Possibility to extend later (comments etc)  The easiest way would be to setup blog on a Wordpress powered hosting but it doesn\u0026rsquo;t sound like fun to me üòÅ I\u0026rsquo;ve done some research and found out that static site generator would be the perfect solution here.","title":"A few words on how this blog is built"},{"content":"Recently I started searching for a comment system I could use on this blog. Pretty standard functionality for a blog, but as this is static site, there is no option/plugin included by default.\nAfter some time spent on research I ended up with Disqus - I know there is a ton of hate over this platform recently but honestly installation is super easy - needs just copy-pasting some html/js code, generating id and you are set.\nI did, as I thought and after few minutes it was ready.\nWhat I found out:\nThere is a free plan, but this shows a ton of ads around the comments section which is unacceptable for me. I don\u0026rsquo;t consider paid plan (at least 11$/month) because this blog is a hobby project so I don\u0026rsquo;t want to invest too much at start.\nUPDATE: There is a statement that when you run personal blog, nonprofit or edu sites, advertising is optional.\nI am going to apply for this free-plus plan and we will see how it works - for the moment I turn off the comments system because this is garbage in the free plan.\n","permalink":"https://tpalucki.github.io/posts/disqus-the-wrong-way/","summary":"Recently I started searching for a comment system I could use on this blog. Pretty standard functionality for a blog, but as this is static site, there is no option/plugin included by default.\nAfter some time spent on research I ended up with Disqus - I know there is a ton of hate over this platform recently but honestly installation is super easy - needs just copy-pasting some html/js code, generating id and you are set.","title":"Disqus - you're doing it the wrong way"},{"content":"Angular and Spring Boot are pretty widely used technologies nowadays. Both projects are mature, well documented and supported by large community. That is why I decided to show you how to build self contained Angular 8 application backed with the Spring Boot 2 App.\nCode shown in this tutorial might be used as starter template for your own project. All the code is available on my github.\nStep 1 - Generate the Spring Boot App Go to https://start.spring.io/ and pick:\n Maven project Pick the Spring Boot version (I checked 2.2.7) Type in the project metadata for Maven build: group, artifact, name, description and package name Pick your Java version (I checked 14) with Jar packaging. No dependencies for now - you can add them if you need anything.  Your are now ready to generate your project package so push the Generate button. Download and extract application to your workspace.\nStep 2 - Angular client Now you are ready to scaffold the Angular Client. If you don\u0026rsquo;t have the Angular CLI setup yet your can go through Get started section of https://angular.io/docs\ngo to your project directory and type:\n$ ng new client\nYou will have to answer some question about your app configuration - Routing and Stylesheet format. Then press enter and within few seconds you have your client app generated.\nIt is in client directory so we will have to move it to the root of your project to have nice sources structure under /src/\n$ cp -R client/* ./\nThen you can remove the client directory which is empty now.\n$ rm -rf ./client\nStep 3 - Integrate Angular build with your Maven build You should have your project imported to your favorite IDE by now.\nManaging node and npm versions across multiple development environments is a pain in the ass of the every developer so ideally we would like to have the exact same configuration (versions of tools and dependencies) everywhere we build the application. This is exactly what Frontent-Maven-Plugin provides! Plugin is available here together with some example configuration end docs.\nBelow I have prepared the configuration for out project. You can add it to your pom.xml:\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.github.eirslett\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;frontend-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.9.1\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;nodeVersion\u0026gt;v10.16.0\u0026lt;/nodeVersion\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;install node and npm\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;install-node-and-npm\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;npm install\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;npm\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;arguments\u0026gt;install\u0026lt;/arguments\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;npm run build\u0026lt;/id\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;npm\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;arguments\u0026gt;run build\u0026lt;/arguments\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt; This adds frontent-maven-plugin to our build. You can see we have the node version configured so you can insert your preferred one.\nIn executions section I have added steps for installing node, installing project dependencies and building the client app. It is now part of the Maven build.\nYou can now install the node and all dependencies by running in the console:\n$ ./mvnw generate-resources\nIt will download node with npm locally and build the application.\nDon\u0026rsquo;t forget to add node and node_modules directories to your .gitignore file - you don\u0026rsquo;t want to push a ton of dependencies to the git repo!\n$ echo 'node' \u0026gt;\u0026gt; .gitignore\n$ echo 'node_modules' \u0026gt;\u0026gt; .gitignore\nStep 4 - Running the build You can test the build by running:\n$ mvn clean package\nYou don\u0026rsquo;t have to generate all these on your own - I published a template project on my github\n","permalink":"https://tpalucki.github.io/posts/spring-boot-with-angular-tutorial/","summary":"Angular and Spring Boot are pretty widely used technologies nowadays. Both projects are mature, well documented and supported by large community. That is why I decided to show you how to build self contained Angular 8 application backed with the Spring Boot 2 App.\nCode shown in this tutorial might be used as starter template for your own project. All the code is available on my github.\nStep 1 - Generate the Spring Boot App Go to https://start.","title":"Spring Boot With Angular build integration"},{"content":"This is my first post ever so I just wanted to say hello to everyone visiting my page. My name is Tomasz and I\u0026rsquo;ve created this blog to have easily accessible place to post the notes I create during my work.\n","permalink":"https://tpalucki.github.io/posts/about-me/","summary":"This is my first post ever so I just wanted to say hello to everyone visiting my page. My name is Tomasz and I\u0026rsquo;ve created this blog to have easily accessible place to post the notes I create during my work.","title":"Hi everyone!"},{"content":"","permalink":"https://tpalucki.github.io/about/","summary":"","title":""}]